[{"name":"FulfillmentCreateV2","prefetch":1,"expiration":null,"retry":0,"codeHandler":"msg.data.order_id","erpCodeHandler":"postData.tracking_number","handler":null,"concurrentImport":false,"sendMail":false,"enable":true,"ecommName":null,"crmName":null,"shopifyName":"fulfillmentCreateV2","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":false,"twoWaySync":true,"erpMapping":"data=>data;","shopifyMapping":"(postData) => {\n\tconst data = postData.data;\n\tconst parentData = postData.parentData;\n\tconst fulfillmentOrderId = data.id;\n    let releaseLine = parentData.releaseLine;\n    const lines = data.line_items || [];\n    let fulfillmentOrderLineItems = [];\n    \n    lines.forEach(line => {\n    \tlet vid = line.line_item_id;\n    \tlet fulfillable_quantity = line.fulfillable_quantity;\n        if (vid != null) {\n          let quantity = releaseLine[vid];\n          let id = `gid://shopify/FulfillmentOrderLineItem/${line.id}`;\n          if (quantity > 0 && fulfillable_quantity > 0) {\n             if (quantity > fulfillable_quantity) {\n                let sub = quantity - fulfillable_quantity;\n                quantity = fulfillable_quantity;\n                releaseLine[vid] = sub;\n             }\n             fulfillmentOrderLineItems.push({\n          \t\tid,quantity\n          \t});\n          }\n        }\n    });\n\tconsole.log('parentData', parentData);\n\treturn {\n\t\t\"fulfillment\": {\n\t\t\t\"lineItemsByFulfillmentOrder\": {\n\t\t\t\t\"fulfillmentOrderId\": `gid://shopify/FulfillmentOrder/${fulfillmentOrderId}`,\n               fulfillmentOrderLineItems\n\t\t\t},\n            \"trackingInfo\": parentData.trackingInfo\n\t\t},\n       \"message\": \"FROM_DM_MIDDLEWARE\"\n\t}\n}","shopifyGql":"mutation fulfillmentCreateV2($fulfillment: FulfillmentV2Input!) {\n  fulfillmentCreateV2(fulfillment: $fulfillment) {\n    fulfillment {\n      id\n      status\n    }\n    userErrors {\n      field\n      message\n    }\n  }\n}","shopifyQueryMapping":null,"gql":null,"note":null,"preload":false,"preloadCount":null,"preloadKey":null,"batchImport":null,"applyOn":["Shopify"],"webhookTopic":"fulfillments/create"},{"name":"Webhook","prefetch":1,"expiration":null,"retry":0,"codeHandler":null,"erpCodeHandler":null,"handler":null,"concurrentImport":false,"sendMail":false,"enable":true,"ecommName":null,"crmName":null,"shopifyName":"webhooks","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":false,"twoWaySync":false,"erpMapping":null,"shopifyMapping":"data=>data","shopifyGql":null,"shopifyQueryMapping":"","gql":null,"note":"it's internal type","preload":false,"preloadCount":null,"preloadKey":null,"batchImport":null,"applyOn":["Shopify"],"webhookTopic":null},{"name":"MetafieldsSet","prefetch":1,"expiration":null,"retry":0,"codeHandler":null,"erpCodeHandler":null,"handler":null,"concurrentImport":false,"sendMail":false,"enable":true,"ecommName":null,"crmName":null,"shopifyName":"metafieldsSet","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":false,"twoWaySync":false,"erpMapping":null,"shopifyMapping":"data =>  {\n  const normal = data.normal;\n  let mfs = normal.metafields;\n  let ms = [];\n\n\n  if (mfs && mfs.length > 0) {\n  \n    for(let i =0; i< mfs.length; i++) {\n      let mf = mfs[i];\n      if (ms.length >= 25) {\n        break;\n      }\n      if(!mf.value) {\n\t\tcontinue;\n      }\n      mf.ownerId = \t\t`gid://shopify/ProductVariant/${normal.id}`;\n      ms.push(mf);\n    }\n     \n  }\n\n  return {\n  \"metafields\": ms\n  }\n}","shopifyGql":"mutation MetafieldsSet($metafields: [MetafieldsSetInput!]!) {\n      metafieldsSet(metafields: $metafields) {\n        metafields {\n          key\n          namespace\n          value\n          createdAt\n          updatedAt\n        }\n        userErrors {\n          field\n          message\n          code\n        }\n      }\n    }","shopifyQueryMapping":null,"gql":null,"note":"MetafieldsSet","preload":false,"preloadCount":null,"preloadKey":null,"batchImport":null,"applyOn":["Shopify"],"webhookTopic":null},{"name":"Email","prefetch":1,"expiration":null,"retry":0,"codeHandler":null,"erpCodeHandler":null,"handler":null,"concurrentImport":false,"sendMail":false,"enable":true,"ecommName":null,"crmName":null,"shopifyName":"Email","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":false,"twoWaySync":true,"erpMapping":"data=> {\n  let content;\n  try{\n  \tcontent = JSON.parse(data)\n  } catch(e) {\n    content = data;\n  }\n\tlet msg = {\n\t\tcontent,\n        to: 'tianji@voox.cc',\n        from: '8ctj@163.com'\n    }\n\treturn msg;\n}","shopifyMapping":"(data)=>data;","shopifyGql":null,"shopifyQueryMapping":null,"gql":"","note":null,"preload":false,"preloadCount":null,"preloadKey":null,"batchImport":null,"applyOn":["Shopify"],"webhookTopic":null},{"name":"OrderTransaction","prefetch":1,"expiration":20,"retry":0,"codeHandler":null,"erpCodeHandler":"postData.order_id","handler":null,"concurrentImport":false,"sendMail":false,"enable":true,"ecommName":null,"crmName":null,"shopifyName":"OrderTransaction","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":false,"twoWaySync":true,"erpMapping":"data=>data;","shopifyMapping":"(data)=>data;","shopifyGql":null,"shopifyQueryMapping":null,"gql":null,"note":null,"preload":false,"preloadCount":null,"preloadKey":null,"batchImport":null,"applyOn":["Shopify"],"webhookTopic":"order_transactions/create"},{"name":"Webhook_Graphql","prefetch":1,"expiration":null,"retry":0,"codeHandler":null,"erpCodeHandler":null,"handler":null,"concurrentImport":false,"sendMail":false,"enable":true,"ecommName":null,"crmName":null,"shopifyName":"webhookSubscriptionCreate","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":false,"twoWaySync":false,"erpMapping":null,"shopifyMapping":"(data)=>data;","shopifyGql":"mutation webhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: WebhookSubscriptionInput!) {\n    webhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {\n      webhookSubscription {\n        id\n        topic\n        format\n        includeFields\n        endpoint {\n          __typename\n          ... on WebhookHttpEndpoint {\n            callbackUrl\n          }\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }","shopifyQueryMapping":null,"gql":null,"note":"it's internal","preload":false,"preloadCount":null,"preloadKey":null,"batchImport":null,"applyOn":["Shopify"],"webhookTopic":null},{"name":"ReturnOrder","prefetch":1,"expiration":null,"retry":0,"codeHandler":null,"erpCodeHandler":"postData.name","handler":null,"concurrentImport":false,"sendMail":false,"enable":true,"ecommName":null,"crmName":null,"shopifyName":"ReturnOrder","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":false,"twoWaySync":true,"erpMapping":"data=>data;","shopifyMapping":"(data)=>data;","shopifyGql":null,"shopifyQueryMapping":null,"gql":null,"note":null,"preload":false,"preloadCount":null,"preloadKey":null,"batchImport":null,"applyOn":["Shopify"],"webhookTopic":"RETURNS_APPROVE__graphql"},{"name":"Item","prefetch":1,"expiration":null,"retry":0,"codeHandler":"","erpCodeHandler":"postData.title","handler":null,"concurrentImport":false,"sendMail":false,"enable":true,"ecommName":"","crmName":"","shopifyName":"products","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":false,"twoWaySync":true,"erpMapping":"async (productData, apiFunc)=> {\n  // Initialize the API client\n  const api = apiFunc && apiFunc();\n  console.log('api',api);\n  const fetchGraphQLData = api.graphql;\n\n  // Extract all variant IDs\n  const variantIds = productData.variants.map(variant => variant.admin_graphql_api_id);\n\tconsole.log('variantIds', variantIds);\n  // Create the GraphQL query\n  const query = `\n    query ($ids: [ID!]!) {\n      nodes(ids: $ids) {\n        ... on ProductVariant {\n          id\n          metafields(first: 100) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n                type\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n\n  const variables = {\n    ids: variantIds\n  };\n\n  // Make the API call using the provided client\n  const result = await fetchGraphQLData(query, variables);\n\tconsole.log('get result from variant', result);\n  // Update the original JSON with metafields data\n  const nodes = result.nodes;\n  productData.variants.forEach(variant => {\n    const node = nodes.find(n => n.id === variant.admin_graphql_api_id);\n    if (node && node.metafields) {\n      variant.metafields = node.metafields.edges.map(edge => edge.node);\n    }\n  });\n\n  return productData;\n}","shopifyMapping":"","shopifyGql":"","shopifyQueryMapping":"","gql":null,"note":"only sync to erp, \nsync to shopify from ProductVariantCreate/ProductVariantUpdate","preload":false,"preloadCount":null,"preloadKey":null,"batchImport":null,"applyOn":["Shopify"],"webhookTopic":"products/update"},{"name":"Customer","prefetch":1,"expiration":null,"retry":0,"codeHandler":"postData.first_name;postData.last_name","erpCodeHandler":null,"handler":null,"concurrentImport":false,"sendMail":false,"enable":true,"ecommName":"","crmName":"","shopifyName":"Customer","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":false,"twoWaySync":false,"erpMapping":null,"shopifyMapping":"data => {\n    let normal = data.normal;\n    if (typeof normal == 'string') {\n\t\tnormal = JSON.parse(normal);\n    }\n   const addr =  normal.addresses[0];\n\treturn {\n      \t\"__id__\": normal.id,\n        \"id\": normal.id,\n        \"email\" : normal.email,\n        \"first_name\": normal.firstName,\n        \"last_name\": normal.lastName,\n        \"phone\": normal.phone,\n        \"addresses\": [{\n          ...addr,\n          \"first_name\": addr.firstName,\n\t\t  \"last_name\": addr.lastName,\n          \"default\": true\n        }]\n    }\n}","shopifyGql":"","shopifyQueryMapping":"","gql":null,"note":"customers","preload":false,"preloadCount":null,"preloadKey":null,"batchImport":null,"applyOn":["Shopify"],"webhookTopic":"customers/update"},{"name":"BulkItemUpdateImport","prefetch":1,"expiration":null,"retry":0,"codeHandler":null,"erpCodeHandler":null,"handler":null,"concurrentImport":false,"sendMail":false,"enable":true,"ecommName":null,"crmName":null,"shopifyName":"productVariantUpdate","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":false,"twoWaySync":false,"erpMapping":null,"shopifyMapping":"data=>data;","shopifyGql":"mutation productVariantUpdate($input: ProductVariantInput!) {\n  productVariantUpdate(input: $input) {\n    productVariant {\n      id\n      title\n      inventoryPolicy\n      inventoryQuantity\n      price\n      compareAtPrice\n    }\n    userErrors {\n      field\n      message\n    }\n  }\n}\n","shopifyQueryMapping":null,"gql":null,"note":null,"preload":false,"preloadCount":null,"preloadKey":null,"batchImport":true,"applyOn":["Shopify"],"webhookTopic":null},{"name":"Test","prefetch":1,"expiration":null,"retry":0,"codeHandler":null,"erpCodeHandler":null,"handler":"async (msg, fields, props, $) => {\n  let message = JSON.parse(msg);\n  let http =  $.http;\nconst data = await  http.get(message.url).toPromise().then(async (resp) =>\n                                                             {console.log('get from url ', resp.data);})\n                                                                      \n\n  return  \"welcome: \" + message.name;\n}","concurrentImport":false,"sendMail":true,"enable":false,"ecommName":null,"crmName":null,"shopifyName":"AAA","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":false,"twoWaySync":false,"erpMapping":null,"shopifyMapping":"(data)=>data;","shopifyGql":null,"shopifyQueryMapping":null,"gql":null,"note":null,"preload":false,"preloadCount":null,"preloadKey":null,"batchImport":null,"applyOn":["Shopify"],"webhookTopic":null},{"name":"ProductVariantsBulkCreate","prefetch":1,"expiration":null,"retry":0,"codeHandler":null,"erpCodeHandler":null,"handler":null,"concurrentImport":false,"sendMail":false,"enable":true,"ecommName":null,"crmName":null,"shopifyName":"productVariantsBulkCreate","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":false,"twoWaySync":false,"erpMapping":null,"shopifyMapping":"(data)=>data;","shopifyGql":"mutation productVariantsBulkCreate($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n  productVariantsBulkCreate(productId: $productId, variants: $variants) {\n    product {\n      id\n    }\n    productVariants {\n      id\n      title\n      price\n      compareAtPrice\n    }\n    userErrors {\n      field\n      message\n    }\n  }\n}\n","shopifyQueryMapping":null,"gql":null,"note":null,"preload":false,"preloadCount":null,"preloadKey":null,"batchImport":null,"applyOn":["Shopify"],"webhookTopic":null},{"name":"MetafieldDelete","prefetch":1,"expiration":null,"retry":0,"codeHandler":null,"erpCodeHandler":null,"handler":null,"concurrentImport":false,"sendMail":false,"enable":true,"ecommName":null,"crmName":null,"shopifyName":"metafieldDelete","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":false,"twoWaySync":false,"erpMapping":null,"shopifyMapping":"(data)=>data.data;","shopifyGql":"mutation metafieldDelete($input: MetafieldDeleteInput!) {\n  metafieldDelete(input: $input) {\n    deletedId\n    userErrors {\n      field\n      message\n    }\n  }\n}\n","shopifyQueryMapping":null,"gql":null,"note":null,"preload":false,"preloadCount":null,"preloadKey":null,"batchImport":null,"applyOn":["Shopify"],"webhookTopic":null},{"name":"ProductVariantUpdate","prefetch":1,"expiration":null,"retry":0,"codeHandler":"postData.input.sku","erpCodeHandler":null,"handler":null,"concurrentImport":false,"sendMail":false,"enable":true,"ecommName":null,"crmName":null,"shopifyName":"productVariantUpdate","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":false,"twoWaySync":false,"erpMapping":null,"shopifyMapping":"data =>  {\n  const normal = data.normal;\n  let v = normal.variants[0];\n  return {\n  \"input\": {\n    \"price\": v.price,\n    \"title\": normal.title,\n    \"inventoryItem\": {\n         \"sku\": normal.sku\n    },\n    \"options\": [normal.option1, normal.option2, normal.option3],\n    \"id\": \t`gid://shopify/ProductVariant/${normal.id}`\n  }\n  }\n}","shopifyGql":"mutation productVariantUpdate($input: ProductVariantInput!) {\n      productVariantUpdate(input: $input) {\n        product {\n          id\n          title\n        }\n        productVariant {\n          createdAt\n          displayName\n          id\n          inventoryItem {\n            unitCost {\n              amount\n            }\n            tracked\n          }\n          inventoryPolicy\n          inventoryQuantity\n          price\n          product {\n            id\n          }\n          title\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }","shopifyQueryMapping":null,"gql":null,"note":null,"preload":false,"preloadCount":null,"preloadKey":null,"batchImport":null,"applyOn":["Shopify"],"webhookTopic":null},{"name":"FulfillmentCancel","prefetch":1,"expiration":null,"retry":0,"codeHandler":null,"erpCodeHandler":null,"handler":null,"concurrentImport":false,"sendMail":false,"enable":true,"ecommName":null,"crmName":null,"shopifyName":"fulfillmentCancel","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":false,"twoWaySync":false,"erpMapping":null,"shopifyMapping":"data=> {\n  return {\n\t  \"id\": `gid://shopify/Fulfillment/${data.id}`\n  }\n}","shopifyGql":"mutation fulfillmentCancel($id: ID!) {\n  fulfillmentCancel(id: $id) {\n    fulfillment {\n      id\n      status\n    }\n    userErrors {\n      field\n      message\n    }\n  }\n}\n","shopifyQueryMapping":null,"gql":null,"note":"","preload":false,"preloadCount":null,"preloadKey":null,"batchImport":null,"applyOn":["Shopify"],"webhookTopic":null},{"name":"DelMetaField","prefetch":1,"expiration":null,"retry":0,"codeHandler":null,"erpCodeHandler":null,"handler":null,"concurrentImport":false,"sendMail":false,"enable":true,"ecommName":null,"crmName":null,"shopifyName":"DelMetaField","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":true,"twoWaySync":false,"erpMapping":null,"shopifyMapping":"async (data, apiFunc) => {\n  let metas = data.metas;\n  let ownerId = data.ownerId;\n  let api = apiFunc && apiFunc();\n  const rest = api.rest;\n  const entityType = api.entityType;\n\n  const cusApi = rest['Metafield'];\n\n  try {\n    const fs = await cusApi.all({\n      session: api.session,\n      metafield: {\"owner_id\": ownerId, \"owner_resource\": \"variants\"},\n    });\n    const fuls = fs.data;\n    let postData = [];\n    let list = [];\n    fuls.forEach(f => {\n      metas.forEach(m => {\n        if (f.namespace == m.namespace && f.key == m.key && f.type == m.type) {\n          if (!list.includes(f.id)) {\n              postData.push({\n            \"input\": {\n              \"id\": `gid://shopify/Metafield/${f.id}`\n            }\n         \t });\n            list.push(f.id);\n          }\n      \n        }\n      });\n    });\n    return {\n      data: postData || [],\n      __entityType__: \"MetafieldDelete\"\n    }\n  } catch (e) {\n    console.log('err', e);\n    return e;\n  }\n\n}","shopifyGql":null,"shopifyQueryMapping":null,"gql":null,"note":"it's internal","preload":false,"preloadCount":null,"preloadKey":null,"batchImport":null,"applyOn":["Shopify"],"webhookTopic":null},{"name":"RefundOrder","prefetch":1,"expiration":null,"retry":5,"codeHandler":null,"erpCodeHandler":"postData.order_id","handler":null,"concurrentImport":false,"sendMail":false,"enable":true,"ecommName":null,"crmName":null,"shopifyName":"RefundOrder","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":false,"twoWaySync":true,"erpMapping":"data=>data;","shopifyMapping":"(data)=>data;","shopifyGql":null,"shopifyQueryMapping":null,"gql":null,"note":"同步到Shopify暂时不用，只用同步ERP","preload":false,"preloadCount":null,"preloadKey":null,"batchImport":null,"applyOn":["Shopify"],"webhookTopic":"refunds/create"},{"name":"ProductVariantCreate","prefetch":1,"expiration":null,"retry":0,"codeHandler":"postData.input.sku","erpCodeHandler":null,"handler":null,"concurrentImport":false,"sendMail":false,"enable":true,"ecommName":null,"crmName":null,"shopifyName":"productVariantsBulkCreate","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":false,"twoWaySync":false,"erpMapping":null,"shopifyMapping":"async (data, apiFunc) => {\n  let api = apiFunc && apiFunc();\n  if (!api || !api.graphql) {\n      throw new Error('API function not provided or does not contain a valid GraphQL method.');\n  }\n  if (!data || !data.normal || !data.normal.product_id) {\n     console.log('aaaa', data, data.normal,data.normal.product_id )\n    return {\n      'error': 'product id is is empty!'\n    }\n  }\n  let normal = data.normal;\n  let id = data.normal.product_id;\n  const fetchGraphQLData = api.graphql;\n  console.log('getOptionsByProductId start')\n  async function getOptionsByProductId(productId) {\n          const query = `\n              query getProduct($productId: ID!) {\n                product(id: $productId) {\n                    title\n                    description\n                    options {\n                        name\n                    }\n                }\n             }\n      `;\n\n      const variables = {\n          productId: `gid://shopify/Product/${productId}`\n      };\n\n\n      try {\n        console.log('gql',query);\n          const response = await fetchGraphQLData(query, variables);\n          console.log('Fetching product:', response);\n          return response && response.product && response.product.options;\n      } catch (error) {\n          console.error('Error fetching product:', error);\n          throw error;\n      }\n  }\n\n\n  console.log('getOptionsByProductId start1')\n  let options = await getOptionsByProductId(id) || [];\n  console.log('getOptionsByProductId start2')\n  // Map the options to the corresponding values from data.normal.option1, option2, and option3\n  const optionValues = options.map((option, index) => {\n      let value = \"\";\n      if (index === 0) value = normal.option1 || \"\";    // Use option1 for the first option\n      if (index === 1) value = normal.option2 || \"\";    // Use option2 for the second option\n      if (index === 2) value = normal.option3 || \"\";    // Use option3 for the third option (if exists)\n      return {\n          \"optionName\": option.name,\n          \"name\": value\n      };\n  });\n  console.log('getOptionsByProductId start3')\n  let price = normal.variants && normal.variants[0]&& data.normal.variants[0].price;\n  return {\n      \"productId\": `gid://shopify/Product/${id}`,\n      \"variants\": [\n          {\n              \"inventoryItem\": {\n                  \"sku\": data.normal.sku,\n                  \"tracked\": true\n              },\n              \"inventoryPolicy\": \"DENY\",\n              \"price\": price || 0,  // Example price, default to 0 if not provided\n              \"optionValues\": optionValues,\n              \"metafields\": normal.metafields\n          }\n      ]\n  };\n};","shopifyGql":"mutation productVariantsBulkCreate($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n  productVariantsBulkCreate(productId: $productId, variants: $variants) {\n    product {\n      id\n    }\n    productVariants {\n      id\n      metafields(first: 1) {\n        edges {\n          node {\n            namespace\n            key\n            value\n          }\n        }\n      }\n    }\n    userErrors {\n      field\n      message\n    }\n  }\n}","shopifyQueryMapping":null,"gql":null,"note":"productVariantsBulkCreate","preload":false,"preloadCount":null,"preloadKey":null,"batchImport":null,"applyOn":["Shopify"],"webhookTopic":"products/update"},{"name":"CartCreate","prefetch":1,"expiration":null,"retry":0,"codeHandler":null,"erpCodeHandler":null,"handler":null,"concurrentImport":false,"sendMail":false,"enable":true,"ecommName":null,"crmName":null,"shopifyName":"CartCreate","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":false,"twoWaySync":true,"erpMapping":"data=>data;","shopifyMapping":"data=>data;","shopifyGql":null,"shopifyQueryMapping":null,"gql":null,"note":null,"preload":false,"preloadCount":null,"preloadKey":null,"batchImport":null,"applyOn":["Shopify"],"webhookTopic":"carts/create"},{"name":"CartUpdate","prefetch":1,"expiration":null,"retry":0,"codeHandler":null,"erpCodeHandler":null,"handler":null,"concurrentImport":false,"sendMail":false,"enable":true,"ecommName":null,"crmName":null,"shopifyName":"CartUpdate","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":false,"twoWaySync":true,"erpMapping":"data=>data;","shopifyMapping":"data=>data;","shopifyGql":null,"shopifyQueryMapping":null,"gql":null,"note":null,"preload":false,"preloadCount":null,"preloadKey":null,"batchImport":null,"applyOn":["Shopify"],"webhookTopic":"carts/update"},{"name":"Stock","prefetch":1,"expiration":null,"retry":0,"codeHandler":null,"erpCodeHandler":null,"handler":null,"concurrentImport":false,"sendMail":false,"enable":true,"ecommName":null,"crmName":null,"shopifyName":"inventorySetQuantities","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":false,"twoWaySync":false,"erpMapping":null,"shopifyMapping":"async (data, apiFunc) => {\n    let api = apiFunc && apiFunc();\n    const rest = api.rest;\n    const fetchGraphQLData = api.graphql;\n    const cusApi = rest['Location'];\n    let dataArray = data.dataArray;\n    let quantities = [];\n    // 定义同步获取多个 variant 信息的函数\n    async function getVariantsByIdsSync(variantIds, locationId) {\n        const query = `\n        query GetProductVariantsWithInventoryLevel($ids: [ID!]!, $locationId: ID!) {\n          nodes(ids: $ids) {\n            ... on ProductVariant {\n              id\n              inventoryQuantity\n              inventoryItem {\n                id\n                inventoryLevel(locationId: $locationId) {\n                  id\n                  location {\n                    id\n                    name\n                  }\n                  quantities(names: [\"available\"]) {\n                    name\n                    quantity\n                  }\n                }\n              }\n            }\n          }\n        }\n      `;\n\n        const variables = {\n            ids: variantIds.map(id => `gid://shopify/ProductVariant/${id}`),\n            locationId\n        };\n        console.log('variant variables', variables);\n\n        try {\n            const body = await fetchGraphQLData(query, variables);\n            console.log('fetching variant information', body);\n            return body && body.nodes; // 同步返回所有 variants 信息\n        } catch (error) {\n            console.error('Error fetching variant information:', error);\n            throw error;\n        }\n    }\n\n\n    try {\n        // 获取所有 locations\n        const fs = await cusApi.all({ session: api.session });\n        const ls = fs.data;\n\n        async function processLocations(ls, dataArray) {\n            let qts = [];\n\n            for (const location of ls) {\n                if (location.active) {\n                    const locationId = `gid://shopify/Location/${location.id}`;\n\n                    // 提取所有的 variant IDs\n                    const variantIds = dataArray.map(item => item.id);\n                    console.log('invoke getVariantsByIdsSync ', variantIds, locationId);\n\n                    try {\n                        const variants = await getVariantsByIdsSync(variantIds, locationId);\n                        console.log('Variants Information:', variants);\n\n                        for (const variant of variants) {\n                            if (!variant) {\n                                continue;\n                            }\n\n                            let inventoryItem = variant.inventoryItem;\n                            if (inventoryItem) {\n                                console.log('@@@@@Variants Information@@@@', JSON.stringify(variant))\n                                const dataItem = dataArray.find(item => item.id == variant.id.split(\"/\").pop());\n                                console.log('dataItem', dataItem);\n                                if (dataItem && inventoryItem.inventoryLevel && inventoryItem.id) {\n                                    let obj = {\n                                        \"inventoryItemId\": inventoryItem.id,\n                                        \"locationId\": locationId,\n                                        \"quantity\": dataItem.qty\n                                    };\n                                    qts.push(obj);\n                                }\n                            }\n                        }\n                    } catch (error) {\n                        console.error('Error processing location:', error);\n                        throw error;\n                    }\n                }\n            }\n            console.log('qts', qts);\n            return qts;\n        }\n\n        quantities = await processLocations(ls, dataArray);\n    } catch (error) {\n        console.error('Error:', error);\n    }\n\n    return {\n        \"input\": {\n            \"name\": \"on_hand\",\n            \"reason\": \"correction\",\n            \"ignoreCompareQuantity\": true,\n            quantities\n        }\n    }\n}","shopifyGql":"mutation inventorySetQuantities($input: InventorySetQuantitiesInput!) {\n  inventorySetQuantities(input: $input) {\n    inventoryAdjustmentGroup {\n      reason\n      referenceDocumentUri\n      changes {\n        name\n        delta\n        quantityAfterChange\n      }\n    }\n    userErrors {\n      code\n      field\n      message\n    }\n  }\n}","shopifyQueryMapping":null,"gql":null,"note":"inventorySetQuantities","preload":false,"preloadCount":null,"preloadKey":null,"batchImport":null,"applyOn":["Shopify"],"webhookTopic":null},{"name":"SalesOrder","prefetch":1,"expiration":1,"retry":3,"codeHandler":"postData.parentData.id","erpCodeHandler":"postData.order_number","handler":"","concurrentImport":false,"sendMail":true,"enable":true,"ecommName":"","crmName":"","shopifyName":"fulfillmentCreateV2","mapping":"(data)=>data;","crmMapping":"(data)=>data;","isCustom":true,"twoWaySync":true,"erpMapping":"async (data, apiFunc) => {\n  if(!(data.financial_status == 'partially_paid'||\n     data.financial_status == 'paid' ||\n     data.financial_status == 'partially_refunded'||\n      data.financial_status ==  'refunded'\n      ))\n  {\n  \treturn data;\n  }\n\n  let api = apiFunc && apiFunc();\n\n  const rest = api.rest;\n\n  const entityType = api.entityType;\n\n  const cusApi = rest['Transaction'];\n  let fulfillment_orders;\n  if (data.shipping_address == null) {\n    const fulorderApi = rest['FulfillmentOrder'];\n    fulfillment_orders = await fulorderApi.all({session:api.session, order_id: data.id });\n\tfulfillment_orders = fulfillment_orders.data;\n  }\n  try {\n    const fs = await cusApi.all({session:api.session,   order_id: data.id });\n    const fuls = fs.data;\nlet nfs =     fuls.filter(p => p.kind == 'capture' && p.status == 'success');\n   function sort_by_key(array, key) {\n     return array.sort(function(a, b)\n     {\n      var x = a[key]; var y = b[key];\n      x = new Date(x);\n      y = new Date(y);\n      return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n     });\n }\n    \nlet nt =    sort_by_key(nfs, 'created_at');\n  if (nt.length > 0) {\n       return {\n                ...data,\n         fulfillment_orders,\n               orderTransaction: nt[0]\n        }\n  } else {\n    return {\n                ...data,\n      fulfillment_orders,\n               orderTransaction: {}\n        }\n  }\n\n\n  }catch(e) {\n    console.error('err in so erp mapping>>>>>>>>>>>>>', e);\n    return e;\n  }\n\t\n}","shopifyMapping":"async (data, apiFunc) => {\n    let normal = data.normal;\n    if (typeof normal == 'string') {\n\t\tnormal = JSON.parse(normal);\n    }\n  \n  let api = apiFunc && apiFunc();\n  const rest = api.rest;\n  const entityType = api.entityType;\n\n  const cusApi = rest['FulfillmentOrder'];\n\n  try {\n    const fs = await cusApi.all({session:api.session,   order_id: normal.id });\n    console.log('so type get FulfillmentOrder from rest api', fs);\n    const fuls = fs.data;\n    let fulfillment = [];\n    fuls.forEach(f => {\n      if (f.status != 'closed') {\n      \tfulfillment.push(f);\n      }\n    });\n     return {\n       parentData: normal,\n       data: fulfillment || [], \n       __entityType__: \"FulfillmentCreateV2\"      \n            }\n  }catch(e) {\n    console.log('err', e);\n    return e;\n  }\n\t\n}","shopifyGql":"","shopifyQueryMapping":"","gql":"","note":"it's internal ","preload":false,"preloadCount":null,"preloadKey":null,"batchImport":null,"applyOn":["Shopify"],"webhookTopic":"orders/updated"}]